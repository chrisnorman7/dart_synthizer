// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for the Synthizer audio library
class DartSynthizer {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartSynthizer(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartSynthizer.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void syz_eventDeinit(
    ffi.Pointer<syz_Event> event,
  ) {
    return _syz_eventDeinit(
      event,
    );
  }

  late final _syz_eventDeinitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<syz_Event>)>>(
          'syz_eventDeinit');
  late final _syz_eventDeinit =
      _syz_eventDeinitPtr.asFunction<void Function(ffi.Pointer<syz_Event>)>();

  void syz_libraryConfigSetDefaults(
    ffi.Pointer<syz_LibraryConfig> config,
  ) {
    return _syz_libraryConfigSetDefaults(
      config,
    );
  }

  late final _syz_libraryConfigSetDefaultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<syz_LibraryConfig>)>>('syz_libraryConfigSetDefaults');
  late final _syz_libraryConfigSetDefaults = _syz_libraryConfigSetDefaultsPtr
      .asFunction<void Function(ffi.Pointer<syz_LibraryConfig>)>();

  int syz_initialize() {
    return _syz_initialize();
  }

  late final _syz_initializePtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function()>>('syz_initialize');
  late final _syz_initialize = _syz_initializePtr.asFunction<int Function()>();

  int syz_initializeWithConfig(
    ffi.Pointer<syz_LibraryConfig> config,
  ) {
    return _syz_initializeWithConfig(
      config,
    );
  }

  late final _syz_initializeWithConfigPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<syz_LibraryConfig>)>>('syz_initializeWithConfig');
  late final _syz_initializeWithConfig = _syz_initializeWithConfigPtr
      .asFunction<int Function(ffi.Pointer<syz_LibraryConfig>)>();

  int syz_shutdown() {
    return _syz_shutdown();
  }

  late final _syz_shutdownPtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function()>>('syz_shutdown');
  late final _syz_shutdown = _syz_shutdownPtr.asFunction<int Function()>();

  int syz_getLastErrorCode() {
    return _syz_getLastErrorCode();
  }

  late final _syz_getLastErrorCodePtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function()>>(
          'syz_getLastErrorCode');
  late final _syz_getLastErrorCode =
      _syz_getLastErrorCodePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> syz_getLastErrorMessage() {
    return _syz_getLastErrorMessage();
  }

  late final _syz_getLastErrorMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'syz_getLastErrorMessage');
  late final _syz_getLastErrorMessage = _syz_getLastErrorMessagePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function()>();

  int syz_handleIncRef(
    int handle,
  ) {
    return _syz_handleIncRef(
      handle,
    );
  }

  late final _syz_handleIncRefPtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function(syz_Handle)>>(
          'syz_handleIncRef');
  late final _syz_handleIncRef =
      _syz_handleIncRefPtr.asFunction<int Function(int)>();

  int syz_handleDecRef(
    int handle,
  ) {
    return _syz_handleDecRef(
      handle,
    );
  }

  late final _syz_handleDecRefPtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function(syz_Handle)>>(
          'syz_handleDecRef');
  late final _syz_handleDecRef =
      _syz_handleDecRefPtr.asFunction<int Function(int)>();

  void syz_initDeleteBehaviorConfig(
    ffi.Pointer<syz_DeleteBehaviorConfig> cfg,
  ) {
    return _syz_initDeleteBehaviorConfig(
      cfg,
    );
  }

  late final _syz_initDeleteBehaviorConfigPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<syz_DeleteBehaviorConfig>)>>(
      'syz_initDeleteBehaviorConfig');
  late final _syz_initDeleteBehaviorConfig = _syz_initDeleteBehaviorConfigPtr
      .asFunction<void Function(ffi.Pointer<syz_DeleteBehaviorConfig>)>();

  int syz_configDeleteBehavior(
    int object,
    ffi.Pointer<syz_DeleteBehaviorConfig> cfg,
  ) {
    return _syz_configDeleteBehavior(
      object,
      cfg,
    );
  }

  late final _syz_configDeleteBehaviorPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  syz_Handle, ffi.Pointer<syz_DeleteBehaviorConfig>)>>(
      'syz_configDeleteBehavior');
  late final _syz_configDeleteBehavior = _syz_configDeleteBehaviorPtr
      .asFunction<int Function(int, ffi.Pointer<syz_DeleteBehaviorConfig>)>();

  int syz_handleGetObjectType(
    ffi.Pointer<ffi.Int32> out,
    int handle,
  ) {
    return _syz_handleGetObjectType(
      out,
      handle,
    );
  }

  late final _syz_handleGetObjectTypePtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<ffi.Int32>, syz_Handle)>>('syz_handleGetObjectType');
  late final _syz_handleGetObjectType = _syz_handleGetObjectTypePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>, int)>();

  int syz_handleGetUserdata(
    ffi.Pointer<ffi.Pointer<ffi.Void>> out,
    int handle,
  ) {
    return _syz_handleGetUserdata(
      out,
      handle,
    );
  }

  late final _syz_handleGetUserdataPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
              syz_Handle)>>('syz_handleGetUserdata');
  late final _syz_handleGetUserdata = _syz_handleGetUserdataPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  int syz_handleSetUserdata(
    int handle,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> free_callback,
  ) {
    return _syz_handleSetUserdata(
      handle,
      userdata,
      free_callback,
    );
  }

  late final _syz_handleSetUserdataPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(syz_Handle, ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>>('syz_handleSetUserdata');
  late final _syz_handleSetUserdata = _syz_handleSetUserdataPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_pause(
    int object,
  ) {
    return _syz_pause(
      object,
    );
  }

  late final _syz_pausePtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function(syz_Handle)>>(
          'syz_pause');
  late final _syz_pause = _syz_pausePtr.asFunction<int Function(int)>();

  int syz_play(
    int object,
  ) {
    return _syz_play(
      object,
    );
  }

  late final _syz_playPtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function(syz_Handle)>>(
          'syz_play');
  late final _syz_play = _syz_playPtr.asFunction<int Function(int)>();

  int syz_getI(
    ffi.Pointer<ffi.Int32> out,
    int target,
    int property,
  ) {
    return _syz_getI(
      out,
      target,
      property,
    );
  }

  late final _syz_getIPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<ffi.Int32>, syz_Handle, ffi.Int32)>>('syz_getI');
  late final _syz_getI =
      _syz_getIPtr.asFunction<int Function(ffi.Pointer<ffi.Int32>, int, int)>();

  int syz_setI(
    int target,
    int property,
    int value,
  ) {
    return _syz_setI(
      target,
      property,
      value,
    );
  }

  late final _syz_setIPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              syz_Handle, ffi.Int32, ffi.Int32)>>('syz_setI');
  late final _syz_setI = _syz_setIPtr.asFunction<int Function(int, int, int)>();

  int syz_getD(
    ffi.Pointer<ffi.Double> out,
    int target,
    int property,
  ) {
    return _syz_getD(
      out,
      target,
      property,
    );
  }

  late final _syz_getDPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<ffi.Double>, syz_Handle, ffi.Int32)>>('syz_getD');
  late final _syz_getD = _syz_getDPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int, int)>();

  int syz_setD(
    int target,
    int property,
    double value,
  ) {
    return _syz_setD(
      target,
      property,
      value,
    );
  }

  late final _syz_setDPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              syz_Handle, ffi.Int32, ffi.Double)>>('syz_setD');
  late final _syz_setD =
      _syz_setDPtr.asFunction<int Function(int, int, double)>();

  int syz_setO(
    int target,
    int property,
    int value,
  ) {
    return _syz_setO(
      target,
      property,
      value,
    );
  }

  late final _syz_setOPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              syz_Handle, ffi.Int32, syz_Handle)>>('syz_setO');
  late final _syz_setO = _syz_setOPtr.asFunction<int Function(int, int, int)>();

  int syz_getD3(
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> z,
    int target,
    int property,
  ) {
    return _syz_getD3(
      x,
      y,
      z,
      target,
      property,
    );
  }

  late final _syz_getD3Ptr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              syz_Handle,
              ffi.Int32)>>('syz_getD3');
  late final _syz_getD3 = _syz_getD3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int, int)>();

  int syz_setD3(
    int target,
    int property,
    double x,
    double y,
    double z,
  ) {
    return _syz_setD3(
      target,
      property,
      x,
      y,
      z,
    );
  }

  late final _syz_setD3Ptr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(syz_Handle, ffi.Int32, ffi.Double, ffi.Double,
              ffi.Double)>>('syz_setD3');
  late final _syz_setD3 = _syz_setD3Ptr
      .asFunction<int Function(int, int, double, double, double)>();

  int syz_getD6(
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> z1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
    ffi.Pointer<ffi.Double> z2,
    int target,
    int property,
  ) {
    return _syz_getD6(
      x1,
      y1,
      z1,
      x2,
      y2,
      z2,
      target,
      property,
    );
  }

  late final _syz_getD6Ptr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              syz_Handle,
              ffi.Int32)>>('syz_getD6');
  late final _syz_getD6 = _syz_getD6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          int)>();

  int syz_setD6(
    int handle,
    int property,
    double x1,
    double y1,
    double z1,
    double x2,
    double y2,
    double z2,
  ) {
    return _syz_setD6(
      handle,
      property,
      x1,
      y1,
      z1,
      x2,
      y2,
      z2,
    );
  }

  late final _syz_setD6Ptr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(syz_Handle, ffi.Int32, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double, ffi.Double)>>('syz_setD6');
  late final _syz_setD6 = _syz_setD6Ptr.asFunction<
      int Function(int, int, double, double, double, double, double, double)>();

  int syz_getBiquad(
    ffi.Pointer<syz_BiquadConfig> filter,
    int target,
    int property,
  ) {
    return _syz_getBiquad(
      filter,
      target,
      property,
    );
  }

  late final _syz_getBiquadPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<syz_BiquadConfig>, syz_Handle,
              ffi.Int32)>>('syz_getBiquad');
  late final _syz_getBiquad = _syz_getBiquadPtr
      .asFunction<int Function(ffi.Pointer<syz_BiquadConfig>, int, int)>();

  int syz_setBiquad(
    int target,
    int property,
    ffi.Pointer<syz_BiquadConfig> filter,
  ) {
    return _syz_setBiquad(
      target,
      property,
      filter,
    );
  }

  late final _syz_setBiquadPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(syz_Handle, ffi.Int32,
              ffi.Pointer<syz_BiquadConfig>)>>('syz_setBiquad');
  late final _syz_setBiquad = _syz_setBiquadPtr
      .asFunction<int Function(int, int, ffi.Pointer<syz_BiquadConfig>)>();

  int syz_biquadDesignIdentity(
    ffi.Pointer<syz_BiquadConfig> filter,
  ) {
    return _syz_biquadDesignIdentity(
      filter,
    );
  }

  late final _syz_biquadDesignIdentityPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<syz_BiquadConfig>)>>('syz_biquadDesignIdentity');
  late final _syz_biquadDesignIdentity = _syz_biquadDesignIdentityPtr
      .asFunction<int Function(ffi.Pointer<syz_BiquadConfig>)>();

  int syz_biquadDesignLowpass(
    ffi.Pointer<syz_BiquadConfig> filter,
    double frequency,
    double q,
  ) {
    return _syz_biquadDesignLowpass(
      filter,
      frequency,
      q,
    );
  }

  late final _syz_biquadDesignLowpassPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<syz_BiquadConfig>, ffi.Double,
              ffi.Double)>>('syz_biquadDesignLowpass');
  late final _syz_biquadDesignLowpass = _syz_biquadDesignLowpassPtr.asFunction<
      int Function(ffi.Pointer<syz_BiquadConfig>, double, double)>();

  int syz_biquadDesignHighpass(
    ffi.Pointer<syz_BiquadConfig> filter,
    double frequency,
    double q,
  ) {
    return _syz_biquadDesignHighpass(
      filter,
      frequency,
      q,
    );
  }

  late final _syz_biquadDesignHighpassPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<syz_BiquadConfig>, ffi.Double,
              ffi.Double)>>('syz_biquadDesignHighpass');
  late final _syz_biquadDesignHighpass =
      _syz_biquadDesignHighpassPtr.asFunction<
          int Function(ffi.Pointer<syz_BiquadConfig>, double, double)>();

  int syz_biquadDesignBandpass(
    ffi.Pointer<syz_BiquadConfig> filter,
    double frequency,
    double bw,
  ) {
    return _syz_biquadDesignBandpass(
      filter,
      frequency,
      bw,
    );
  }

  late final _syz_biquadDesignBandpassPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<syz_BiquadConfig>, ffi.Double,
              ffi.Double)>>('syz_biquadDesignBandpass');
  late final _syz_biquadDesignBandpass =
      _syz_biquadDesignBandpassPtr.asFunction<
          int Function(ffi.Pointer<syz_BiquadConfig>, double, double)>();

  int syz_createAutomationTimeline(
    ffi.Pointer<syz_Handle> out,
    int point_count,
    ffi.Pointer<syz_AutomationPoint> points,
    int flags,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createAutomationTimeline(
      out,
      point_count,
      points,
      flags,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createAutomationTimelinePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Uint32,
                  ffi.Pointer<syz_AutomationPoint>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createAutomationTimeline');
  late final _syz_createAutomationTimeline =
      _syz_createAutomationTimelinePtr.asFunction<
          int Function(
              ffi.Pointer<syz_Handle>,
              int,
              ffi.Pointer<syz_AutomationPoint>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_automationSetTimeline(
    int object,
    int property,
    int timeline,
  ) {
    return _syz_automationSetTimeline(
      object,
      property,
      timeline,
    );
  }

  late final _syz_automationSetTimelinePtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              syz_Handle, ffi.Int32, syz_Handle)>>('syz_automationSetTimeline');
  late final _syz_automationSetTimeline =
      _syz_automationSetTimelinePtr.asFunction<int Function(int, int, int)>();

  int syz_automationClear(
    int objeect,
    int property,
  ) {
    return _syz_automationClear(
      objeect,
      property,
    );
  }

  late final _syz_automationClearPtr = _lookup<
          ffi.NativeFunction<syz_ErrorCode Function(syz_Handle, ffi.Int32)>>(
      'syz_automationClear');
  late final _syz_automationClear =
      _syz_automationClearPtr.asFunction<int Function(int, int)>();

  int syz_createContext(
    ffi.Pointer<syz_Handle> out,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createContext(
      out,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createContextPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<syz_Handle>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>>('syz_createContext');
  late final _syz_createContext = _syz_createContextPtr.asFunction<
      int Function(ffi.Pointer<syz_Handle>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createContextHeadless(
    ffi.Pointer<syz_Handle> out,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createContextHeadless(
      out,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createContextHeadlessPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createContextHeadless');
  late final _syz_createContextHeadless =
      _syz_createContextHeadlessPtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_contextGetBlock(
    int context,
    ffi.Pointer<ffi.Float> block,
  ) {
    return _syz_contextGetBlock(
      context,
      block,
    );
  }

  late final _syz_contextGetBlockPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              syz_Handle, ffi.Pointer<ffi.Float>)>>('syz_contextGetBlock');
  late final _syz_contextGetBlock = _syz_contextGetBlockPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Float>)>();

  int syz_contextEnableEvents(
    int context,
  ) {
    return _syz_contextEnableEvents(
      context,
    );
  }

  late final _syz_contextEnableEventsPtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function(syz_Handle)>>(
          'syz_contextEnableEvents');
  late final _syz_contextEnableEvents =
      _syz_contextEnableEventsPtr.asFunction<int Function(int)>();

  int syz_contextGetNextEvent(
    ffi.Pointer<syz_Event> out,
    int context,
    int flags,
  ) {
    return _syz_contextGetNextEvent(
      out,
      context,
      flags,
    );
  }

  late final _syz_contextGetNextEventPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<syz_Event>, syz_Handle,
              ffi.Uint64)>>('syz_contextGetNextEvent');
  late final _syz_contextGetNextEvent = _syz_contextGetNextEventPtr
      .asFunction<int Function(ffi.Pointer<syz_Event>, int, int)>();

  int syz_registerStreamProtocol(
    ffi.Pointer<ffi.Int8> protocol,
    ffi.Pointer<syz_StreamOpenCallback> callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _syz_registerStreamProtocol(
      protocol,
      callback,
      userdata,
    );
  }

  late final _syz_registerStreamProtocolPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<syz_StreamOpenCallback>,
              ffi.Pointer<ffi.Void>)>>('syz_registerStreamProtocol');
  late final _syz_registerStreamProtocol =
      _syz_registerStreamProtocolPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<syz_StreamOpenCallback>, ffi.Pointer<ffi.Void>)>();

  int syz_createStreamHandleFromStreamParams(
    ffi.Pointer<syz_Handle> out,
    ffi.Pointer<ffi.Int8> protocol,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Void> param,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createStreamHandleFromStreamParams(
      out,
      protocol,
      path,
      param,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createStreamHandleFromStreamParamsPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createStreamHandleFromStreamParams');
  late final _syz_createStreamHandleFromStreamParams =
      _syz_createStreamHandleFromStreamParamsPtr.asFunction<
          int Function(
              ffi.Pointer<syz_Handle>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createStreamHandleFromMemory(
    ffi.Pointer<syz_Handle> out,
    int data_len,
    ffi.Pointer<ffi.Int8> data,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createStreamHandleFromMemory(
      out,
      data_len,
      data,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createStreamHandleFromMemoryPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createStreamHandleFromMemory');
  late final _syz_createStreamHandleFromMemory =
      _syz_createStreamHandleFromMemoryPtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createStreamHandleFromFile(
    ffi.Pointer<syz_Handle> out,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createStreamHandleFromFile(
      out,
      path,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createStreamHandleFromFilePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createStreamHandleFromFile');
  late final _syz_createStreamHandleFromFile =
      _syz_createStreamHandleFromFilePtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createStreamHandleFromCustomStream(
    ffi.Pointer<syz_Handle> out,
    ffi.Pointer<syz_CustomStreamDef> callbacks,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createStreamHandleFromCustomStream(
      out,
      callbacks,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createStreamHandleFromCustomStreamPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Pointer<syz_CustomStreamDef>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createStreamHandleFromCustomStream');
  late final _syz_createStreamHandleFromCustomStream =
      _syz_createStreamHandleFromCustomStreamPtr.asFunction<
          int Function(
              ffi.Pointer<syz_Handle>,
              ffi.Pointer<syz_CustomStreamDef>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createStreamingGeneratorFromStreamParams(
    ffi.Pointer<syz_Handle> out,
    int context,
    ffi.Pointer<ffi.Int8> protocol,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Void> param,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createStreamingGeneratorFromStreamParams(
      out,
      context,
      protocol,
      path,
      param,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createStreamingGeneratorFromStreamParamsPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createStreamingGeneratorFromStreamParams');
  late final _syz_createStreamingGeneratorFromStreamParams =
      _syz_createStreamingGeneratorFromStreamParamsPtr.asFunction<
          int Function(
              ffi.Pointer<syz_Handle>,
              int,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createStreamingGeneratorFromFile(
    ffi.Pointer<syz_Handle> out,
    int context,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createStreamingGeneratorFromFile(
      out,
      context,
      path,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createStreamingGeneratorFromFilePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createStreamingGeneratorFromFile');
  late final _syz_createStreamingGeneratorFromFile =
      _syz_createStreamingGeneratorFromFilePtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createStreamingGeneratorFromStreamHandle(
    ffi.Pointer<syz_Handle> out,
    int context,
    int stream,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createStreamingGeneratorFromStreamHandle(
      out,
      context,
      stream,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createStreamingGeneratorFromStreamHandlePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  syz_Handle,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createStreamingGeneratorFromStreamHandle');
  late final _syz_createStreamingGeneratorFromStreamHandle =
      _syz_createStreamingGeneratorFromStreamHandlePtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createBufferFromStreamParams(
    ffi.Pointer<syz_Handle> out,
    ffi.Pointer<ffi.Int8> protocol,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Void> param,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createBufferFromStreamParams(
      out,
      protocol,
      path,
      param,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createBufferFromStreamParamsPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createBufferFromStreamParams');
  late final _syz_createBufferFromStreamParams =
      _syz_createBufferFromStreamParamsPtr.asFunction<
          int Function(
              ffi.Pointer<syz_Handle>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createBufferFromEncodedData(
    ffi.Pointer<syz_Handle> out,
    int data_len,
    ffi.Pointer<ffi.Int8> data,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createBufferFromEncodedData(
      out,
      data_len,
      data,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createBufferFromEncodedDataPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createBufferFromEncodedData');
  late final _syz_createBufferFromEncodedData =
      _syz_createBufferFromEncodedDataPtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createBufferFromFloatArray(
    ffi.Pointer<syz_Handle> out,
    int sr,
    int channels,
    int frames,
    ffi.Pointer<ffi.Float> data,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createBufferFromFloatArray(
      out,
      sr,
      channels,
      frames,
      data,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createBufferFromFloatArrayPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Uint32,
                  ffi.Uint32,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createBufferFromFloatArray');
  late final _syz_createBufferFromFloatArray =
      _syz_createBufferFromFloatArrayPtr.asFunction<
          int Function(
              ffi.Pointer<syz_Handle>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createBufferFromFile(
    ffi.Pointer<syz_Handle> out,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createBufferFromFile(
      out,
      path,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createBufferFromFilePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createBufferFromFile');
  late final _syz_createBufferFromFile =
      _syz_createBufferFromFilePtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createBufferFromStreamHandle(
    ffi.Pointer<syz_Handle> out,
    int stream,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createBufferFromStreamHandle(
      out,
      stream,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createBufferFromStreamHandlePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createBufferFromStreamHandle');
  late final _syz_createBufferFromStreamHandle =
      _syz_createBufferFromStreamHandlePtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_bufferGetChannels(
    ffi.Pointer<ffi.Uint32> out,
    int buffer,
  ) {
    return _syz_bufferGetChannels(
      out,
      buffer,
    );
  }

  late final _syz_bufferGetChannelsPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<ffi.Uint32>, syz_Handle)>>('syz_bufferGetChannels');
  late final _syz_bufferGetChannels = _syz_bufferGetChannelsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int syz_bufferGetLengthInSamples(
    ffi.Pointer<ffi.Uint32> out,
    int buffer,
  ) {
    return _syz_bufferGetLengthInSamples(
      out,
      buffer,
    );
  }

  late final _syz_bufferGetLengthInSamplesPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<ffi.Uint32>,
              syz_Handle)>>('syz_bufferGetLengthInSamples');
  late final _syz_bufferGetLengthInSamples = _syz_bufferGetLengthInSamplesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int syz_bufferGetLengthInSeconds(
    ffi.Pointer<ffi.Double> out,
    int buffer,
  ) {
    return _syz_bufferGetLengthInSeconds(
      out,
      buffer,
    );
  }

  late final _syz_bufferGetLengthInSecondsPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(ffi.Pointer<ffi.Double>,
              syz_Handle)>>('syz_bufferGetLengthInSeconds');
  late final _syz_bufferGetLengthInSeconds = _syz_bufferGetLengthInSecondsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int syz_createBufferGenerator(
    ffi.Pointer<syz_Handle> out,
    int context,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createBufferGenerator(
      out,
      context,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createBufferGeneratorPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createBufferGenerator');
  late final _syz_createBufferGenerator =
      _syz_createBufferGeneratorPtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_sourceAddGenerator(
    int source,
    int generator,
  ) {
    return _syz_sourceAddGenerator(
      source,
      generator,
    );
  }

  late final _syz_sourceAddGeneratorPtr = _lookup<
          ffi.NativeFunction<syz_ErrorCode Function(syz_Handle, syz_Handle)>>(
      'syz_sourceAddGenerator');
  late final _syz_sourceAddGenerator =
      _syz_sourceAddGeneratorPtr.asFunction<int Function(int, int)>();

  int syz_sourceRemoveGenerator(
    int source,
    int generator,
  ) {
    return _syz_sourceRemoveGenerator(
      source,
      generator,
    );
  }

  late final _syz_sourceRemoveGeneratorPtr = _lookup<
          ffi.NativeFunction<syz_ErrorCode Function(syz_Handle, syz_Handle)>>(
      'syz_sourceRemoveGenerator');
  late final _syz_sourceRemoveGenerator =
      _syz_sourceRemoveGeneratorPtr.asFunction<int Function(int, int)>();

  int syz_createDirectSource(
    ffi.Pointer<syz_Handle> out,
    int context,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createDirectSource(
      out,
      context,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createDirectSourcePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createDirectSource');
  late final _syz_createDirectSource = _syz_createDirectSourcePtr.asFunction<
      int Function(ffi.Pointer<syz_Handle>, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createAngularPannedSource(
    ffi.Pointer<syz_Handle> out,
    int context,
    int panner_strategy,
    double azimuth,
    double elevation,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createAngularPannedSource(
      out,
      context,
      panner_strategy,
      azimuth,
      elevation,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createAngularPannedSourcePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Int32,
                  ffi.Double,
                  ffi.Double,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createAngularPannedSource');
  late final _syz_createAngularPannedSource =
      _syz_createAngularPannedSourcePtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, int, double, double,
              ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createScalarPannedSource(
    ffi.Pointer<syz_Handle> out,
    int context,
    int panner_strategy,
    double panning_scalar,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createScalarPannedSource(
      out,
      context,
      panner_strategy,
      panning_scalar,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createScalarPannedSourcePtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Int32,
                  ffi.Double,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createScalarPannedSource');
  late final _syz_createScalarPannedSource =
      _syz_createScalarPannedSourcePtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, int, double,
              ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createSource3D(
    ffi.Pointer<syz_Handle> out,
    int context,
    int panner_strategy,
    double x,
    double y,
    double z,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createSource3D(
      out,
      context,
      panner_strategy,
      x,
      y,
      z,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createSource3DPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<syz_Handle>,
              syz_Handle,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>>('syz_createSource3D');
  late final _syz_createSource3D = _syz_createSource3DPtr.asFunction<
      int Function(ffi.Pointer<syz_Handle>, int, int, double, double, double,
          ffi.Pointer<ffi.Void>, ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_createNoiseGenerator(
    ffi.Pointer<syz_Handle> out,
    int context,
    int channels,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createNoiseGenerator(
      out,
      context,
      channels,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createNoiseGeneratorPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createNoiseGenerator');
  late final _syz_createNoiseGenerator =
      _syz_createNoiseGeneratorPtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_initRouteConfig(
    ffi.Pointer<syz_RouteConfig> cfg,
  ) {
    return _syz_initRouteConfig(
      cfg,
    );
  }

  late final _syz_initRouteConfigPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<syz_RouteConfig>)>>('syz_initRouteConfig');
  late final _syz_initRouteConfig = _syz_initRouteConfigPtr
      .asFunction<int Function(ffi.Pointer<syz_RouteConfig>)>();

  int syz_routingConfigRoute(
    int context,
    int output,
    int input,
    ffi.Pointer<syz_RouteConfig> config,
  ) {
    return _syz_routingConfigRoute(
      context,
      output,
      input,
      config,
    );
  }

  late final _syz_routingConfigRoutePtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(syz_Handle, syz_Handle, syz_Handle,
              ffi.Pointer<syz_RouteConfig>)>>('syz_routingConfigRoute');
  late final _syz_routingConfigRoute = _syz_routingConfigRoutePtr
      .asFunction<int Function(int, int, int, ffi.Pointer<syz_RouteConfig>)>();

  int syz_routingRemoveRoute(
    int context,
    int output,
    int input,
    double fade_out,
  ) {
    return _syz_routingRemoveRoute(
      context,
      output,
      input,
      fade_out,
    );
  }

  late final _syz_routingRemoveRoutePtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(syz_Handle, syz_Handle, syz_Handle,
              ffi.Double)>>('syz_routingRemoveRoute');
  late final _syz_routingRemoveRoute = _syz_routingRemoveRoutePtr
      .asFunction<int Function(int, int, int, double)>();

  int syz_effectReset(
    int effect,
  ) {
    return _syz_effectReset(
      effect,
    );
  }

  late final _syz_effectResetPtr =
      _lookup<ffi.NativeFunction<syz_ErrorCode Function(syz_Handle)>>(
          'syz_effectReset');
  late final _syz_effectReset =
      _syz_effectResetPtr.asFunction<int Function(int)>();

  int syz_createGlobalEcho(
    ffi.Pointer<syz_Handle> out,
    int context,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createGlobalEcho(
      out,
      context,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createGlobalEchoPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(
              ffi.Pointer<syz_Handle>,
              syz_Handle,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>>('syz_createGlobalEcho');
  late final _syz_createGlobalEcho = _syz_createGlobalEchoPtr.asFunction<
      int Function(ffi.Pointer<syz_Handle>, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<syz_UserdataFreeCallback>)>();

  int syz_globalEchoSetTaps(
    int handle,
    int n_taps,
    ffi.Pointer<syz_EchoTapConfig> taps,
  ) {
    return _syz_globalEchoSetTaps(
      handle,
      n_taps,
      taps,
    );
  }

  late final _syz_globalEchoSetTapsPtr = _lookup<
      ffi.NativeFunction<
          syz_ErrorCode Function(syz_Handle, ffi.Uint32,
              ffi.Pointer<syz_EchoTapConfig>)>>('syz_globalEchoSetTaps');
  late final _syz_globalEchoSetTaps = _syz_globalEchoSetTapsPtr
      .asFunction<int Function(int, int, ffi.Pointer<syz_EchoTapConfig>)>();

  int syz_createGlobalFdnReverb(
    ffi.Pointer<syz_Handle> out,
    int context,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<syz_UserdataFreeCallback> userdata_free_callback,
  ) {
    return _syz_createGlobalFdnReverb(
      out,
      context,
      userdata,
      userdata_free_callback,
    );
  }

  late final _syz_createGlobalFdnReverbPtr = _lookup<
          ffi.NativeFunction<
              syz_ErrorCode Function(
                  ffi.Pointer<syz_Handle>,
                  syz_Handle,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<syz_UserdataFreeCallback>)>>(
      'syz_createGlobalFdnReverb');
  late final _syz_createGlobalFdnReverb =
      _syz_createGlobalFdnReverbPtr.asFunction<
          int Function(ffi.Pointer<syz_Handle>, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<syz_UserdataFreeCallback>)>();
}

class syz_Event extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @syz_Handle()
  external int source;

  @syz_Handle()
  external int context;
}

typedef syz_Handle = ffi.Uint64;

abstract class SYZ_LOGGING_BACKEND {
  static const int SYZ_LOGGING_BACKEND_NONE = 0;
  static const int SYZ_LOGGING_BACKEND_STDERR = 1;
}

abstract class SYZ_LOG_LEVEL {
  static const int SYZ_LOG_LEVEL_ERROR = 0;
  static const int SYZ_LOG_LEVEL_WARN = 10;
  static const int SYZ_LOG_LEVEL_INFO = 20;
  static const int SYZ_LOG_LEVEL_DEBUG = 30;
}

class syz_LibraryConfig extends ffi.Struct {
  @ffi.Uint32()
  external int log_level;

  @ffi.Uint32()
  external int logging_backend;

  external ffi.Pointer<ffi.Int8> libsndfile_path;
}

typedef syz_ErrorCode = ffi.Int32;

class syz_DeleteBehaviorConfig extends ffi.Struct {
  @ffi.Int32()
  external int linger;

  @ffi.Double()
  external double linger_timeout;
}

typedef syz_UserdataFreeCallback
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>;

class syz_BiquadConfig extends ffi.Struct {
  @ffi.Double()
  external double _b0;

  @ffi.Double()
  external double _b1;

  @ffi.Double()
  external double _b2;

  @ffi.Double()
  external double _a1;

  @ffi.Double()
  external double _a2;

  @ffi.Double()
  external double _gain;

  @ffi.Uint8()
  external int _is_wire;
}

class syz_AutomationPoint extends ffi.Struct {
  @ffi.Uint32()
  external int interpolation_type;

  @ffi.Double()
  external double automation_time;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> values;

  @ffi.Uint64()
  external int flags;
}

class syz_CustomStreamDef extends ffi.Struct {
  external ffi.Pointer<syz_StreamReadCallback> read_cb;

  external ffi.Pointer<syz_StreamSeekCallback> seek_cb;

  external ffi.Pointer<syz_StreamCloseCallback> close_cb;

  external ffi.Pointer<syz_StreamDestroyCallback> destroy_cb;

  @ffi.Int64()
  external int length;

  external ffi.Pointer<ffi.Void> userdata;
}

typedef syz_StreamReadCallback = ffi.NativeFunction<
    ffi.Int32 Function(
        ffi.Pointer<ffi.Uint64>,
        ffi.Uint64,
        ffi.Pointer<ffi.Int8>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Pointer<ffi.Int8>>)>;
typedef syz_StreamSeekCallback = ffi.NativeFunction<
    ffi.Int32 Function(
        ffi.Uint64, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>;
typedef syz_StreamCloseCallback = ffi.NativeFunction<
    ffi.Int32 Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>;
typedef syz_StreamDestroyCallback
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>;
typedef syz_StreamOpenCallback = ffi.NativeFunction<
    ffi.Int32 Function(
        ffi.Pointer<syz_CustomStreamDef>,
        ffi.Pointer<ffi.Int8>,
        ffi.Pointer<ffi.Int8>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Pointer<ffi.Int8>>)>;

class syz_RouteConfig extends ffi.Struct {
  @ffi.Double()
  external double gain;

  @ffi.Double()
  external double fade_time;

  external syz_BiquadConfig filter;
}

class syz_EchoTapConfig extends ffi.Struct {
  @ffi.Double()
  external double delay;

  @ffi.Double()
  external double gain_l;

  @ffi.Double()
  external double gain_r;
}

abstract class SYZ_OBJECT_TYPE {
  static const int SYZ_OTYPE_CONTEXT = 0;
  static const int SYZ_OTYPE_BUFFER = 1;
  static const int SYZ_OTYPE_BUFFER_GENERATOR = 2;
  static const int SYZ_OTYPE_STREAMING_GENERATOR = 3;
  static const int SYZ_OTYPE_NOISE_GENERATOR = 4;
  static const int SYZ_OTYPE_DIRECT_SOURCE = 5;
  static const int SYZ_OTYPE_ANGULAR_PANNED_SOURCE = 6;
  static const int SYZ_OTYPE_SCALAR_PANNED_SOURCE = 7;
  static const int SYZ_OTYPE_SOURCE_3D = 8;
  static const int SYZ_OTYPE_GLOBAL_ECHO = 9;
  static const int SYZ_OTYPE_GLOBAL_FDN_REVERB = 10;
  static const int SYZ_OTYPE_STREAM_HANDLE = 11;
  static const int SYZ_OTYPE_AUTOMATION_TIMELINE = 12;
}

abstract class SYZ_PANNER_STRATEGY {
  static const int SYZ_PANNER_STRATEGY_DELEGATE = 0;
  static const int SYZ_PANNER_STRATEGY_HRTF = 1;
  static const int SYZ_PANNER_STRATEGY_STEREO = 2;
  static const int SYZ_PANNER_STRATEGY_COUNT = 3;
}

abstract class SYZ_DISTANCE_MODEL {
  static const int SYZ_DISTANCE_MODEL_NONE = 0;
  static const int SYZ_DISTANCE_MODEL_LINEAR = 1;
  static const int SYZ_DISTANCE_MODEL_EXPONENTIAL = 2;
  static const int SYZ_DISTANCE_MODEL_INVERSE = 3;
  static const int SYZ_DISTANCE_MODEL_COUNT = 4;
}

abstract class SYZ_NOISE_TYPE {
  static const int SYZ_NOISE_TYPE_UNIFORM = 0;
  static const int SYZ_NOISE_TYPE_VM = 1;
  static const int SYZ_NOISE_TYPE_FILTERED_BROWN = 2;
  static const int SYZ_NOISE_TYPE_COUNT = 3;
}

abstract class SYZ_PROPERTIES {
  static const int SYZ_P_AZIMUTH = 0;
  static const int SYZ_P_BUFFER = 1;
  static const int SYZ_P_ELEVATION = 2;
  static const int SYZ_P_GAIN = 3;
  static const int SYZ_P_DEFAULT_PANNER_STRATEGY = 4;
  static const int SYZ_P_PANNING_SCALAR = 5;
  static const int SYZ_P_PLAYBACK_POSITION = 6;
  static const int SYZ_P_POSITION = 7;
  static const int SYZ_P_ORIENTATION = 8;
  static const int SYZ_P_CLOSENESS_BOOST = 9;
  static const int SYZ_P_CLOSENESS_BOOST_DISTANCE = 10;
  static const int SYZ_P_DISTANCE_MAX = 11;
  static const int SYZ_P_DISTANCE_MODEL = 12;
  static const int SYZ_P_DISTANCE_REF = 13;
  static const int SYZ_P_ROLLOFF = 14;
  static const int SYZ_P_DEFAULT_CLOSENESS_BOOST = 15;
  static const int SYZ_P_DEFAULT_CLOSENESS_BOOST_DISTANCE = 16;
  static const int SYZ_P_DEFAULT_DISTANCE_MAX = 17;
  static const int SYZ_P_DEFAULT_DISTANCE_MODEL = 18;
  static const int SYZ_P_DEFAULT_DISTANCE_REF = 19;
  static const int SYZ_P_DEFAULT_ROLLOFF = 20;
  static const int SYZ_P_LOOPING = 21;
  static const int SYZ_P_NOISE_TYPE = 22;
  static const int SYZ_P_PITCH_BEND = 23;
  static const int SYZ_P_INPUT_FILTER_ENABLED = 24;
  static const int SYZ_P_INPUT_FILTER_CUTOFF = 25;
  static const int SYZ_P_MEAN_FREE_PATH = 26;
  static const int SYZ_P_T60 = 27;
  static const int SYZ_P_LATE_REFLECTIONS_LF_ROLLOFF = 28;
  static const int SYZ_P_LATE_REFLECTIONS_LF_REFERENCE = 29;
  static const int SYZ_P_LATE_REFLECTIONS_HF_ROLLOFF = 30;
  static const int SYZ_P_LATE_REFLECTIONS_HF_REFERENCE = 31;
  static const int SYZ_P_LATE_REFLECTIONS_DIFFUSION = 32;
  static const int SYZ_P_LATE_REFLECTIONS_MODULATION_DEPTH = 33;
  static const int SYZ_P_LATE_REFLECTIONS_MODULATION_FREQUENCY = 34;
  static const int SYZ_P_LATE_REFLECTIONS_DELAY = 35;
  static const int SYZ_P_FILTER = 36;
  static const int SYZ_P_FILTER_DIRECT = 37;
  static const int SYZ_P_FILTER_EFFECTS = 38;
  static const int SYZ_P_FILTER_INPUT = 39;
}

abstract class SYZ_EVENT_TYPES {
  static const int SYZ_EVENT_TYPE_INVALID = 0;
  static const int SYZ_EVENT_TYPE_LOOPED = 1;
  static const int SYZ_EVENT_TYPE_FINISHED = 2;
}

abstract class SYZ_INTERPOLATION_TYPES {
  static const int SYZ_INTERPOLATION_TYPE_NONE = 0;
  static const int SYZ_INTERPOLATION_TYPE_LINEAR = 1;
}
