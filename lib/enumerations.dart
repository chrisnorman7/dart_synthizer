/// Automatically generated by `generate_enums.dart`.
import 'error.dart';

/// SYZ_LOGGING_BACKEND.
enum LoggingBackend {
  /// SYZ_LOGGING_BACKEND = 0
  none,

  /// SYZ_LOGGING_BACKEND = 1
  stderr,
}

/// An extension for converting Dart to Synthizer values.
extension LoggingBackendToInt on LoggingBackend {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case LoggingBackend.none:
        return 0;
      case LoggingBackend.stderr:
        return 1;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToLoggingBackend on int {
  /// Return a Dart value.
  LoggingBackend toLoggingBackend() {
    switch (this) {
      case 0:
        return LoggingBackend.none;
      case 1:
        return LoggingBackend.stderr;
      default:
        throw SynthizerError('Unrecognised LoggingBackend value.', this);
    }
  }
}

/// SYZ_LOG_LEVEL.
enum LogLevel {
  /// SYZ_LOG_LEVEL = 0
  error,

  /// SYZ_LOG_LEVEL = 10
  warn,

  /// SYZ_LOG_LEVEL = 20
  info,

  /// SYZ_LOG_LEVEL = 30
  debug,
}

/// An extension for converting Dart to Synthizer values.
extension LogLevelToInt on LogLevel {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case LogLevel.error:
        return 0;
      case LogLevel.warn:
        return 10;
      case LogLevel.info:
        return 20;
      case LogLevel.debug:
        return 30;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToLogLevel on int {
  /// Return a Dart value.
  LogLevel toLogLevel() {
    switch (this) {
      case 0:
        return LogLevel.error;
      case 10:
        return LogLevel.warn;
      case 20:
        return LogLevel.info;
      case 30:
        return LogLevel.debug;
      default:
        throw SynthizerError('Unrecognised LogLevel value.', this);
    }
  }
}

/// SYZ_OBJECT_TYPE.
enum ObjectType {
  /// SYZ_OBJECT_TYPE = 0
  context,

  /// SYZ_OBJECT_TYPE = 1
  buffer,

  /// SYZ_OBJECT_TYPE = 2
  bufferGenerator,

  /// SYZ_OBJECT_TYPE = 3
  streamingGenerator,

  /// SYZ_OBJECT_TYPE = 4
  noiseGenerator,

  /// SYZ_OBJECT_TYPE = 5
  directSource,

  /// SYZ_OBJECT_TYPE = 6
  angularPannedSource,

  /// SYZ_OBJECT_TYPE = 7
  scalarPannedSource,

  /// SYZ_OBJECT_TYPE = 8
  source3d,

  /// SYZ_OBJECT_TYPE = 9
  globalEcho,

  /// SYZ_OBJECT_TYPE = 10
  globalFdnReverb,

  /// SYZ_OBJECT_TYPE = 11
  streamHandle,

  /// SYZ_OBJECT_TYPE = 12
  automationTimeline,
}

/// An extension for converting Dart to Synthizer values.
extension ObjectTypeToInt on ObjectType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case ObjectType.context:
        return 0;
      case ObjectType.buffer:
        return 1;
      case ObjectType.bufferGenerator:
        return 2;
      case ObjectType.streamingGenerator:
        return 3;
      case ObjectType.noiseGenerator:
        return 4;
      case ObjectType.directSource:
        return 5;
      case ObjectType.angularPannedSource:
        return 6;
      case ObjectType.scalarPannedSource:
        return 7;
      case ObjectType.source3d:
        return 8;
      case ObjectType.globalEcho:
        return 9;
      case ObjectType.globalFdnReverb:
        return 10;
      case ObjectType.streamHandle:
        return 11;
      case ObjectType.automationTimeline:
        return 12;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToObjectType on int {
  /// Return a Dart value.
  ObjectType toObjectType() {
    switch (this) {
      case 0:
        return ObjectType.context;
      case 1:
        return ObjectType.buffer;
      case 2:
        return ObjectType.bufferGenerator;
      case 3:
        return ObjectType.streamingGenerator;
      case 4:
        return ObjectType.noiseGenerator;
      case 5:
        return ObjectType.directSource;
      case 6:
        return ObjectType.angularPannedSource;
      case 7:
        return ObjectType.scalarPannedSource;
      case 8:
        return ObjectType.source3d;
      case 9:
        return ObjectType.globalEcho;
      case 10:
        return ObjectType.globalFdnReverb;
      case 11:
        return ObjectType.streamHandle;
      case 12:
        return ObjectType.automationTimeline;
      default:
        throw SynthizerError('Unrecognised ObjectType value.', this);
    }
  }
}

/// SYZ_PANNER_STRATEGY.
enum PannerStrategy {
  /// SYZ_PANNER_STRATEGY = 0
  delegate,

  /// SYZ_PANNER_STRATEGY = 1
  hrtf,

  /// SYZ_PANNER_STRATEGY = 2
  stereo,

  /// SYZ_PANNER_STRATEGY = 3
  count,
}

/// An extension for converting Dart to Synthizer values.
extension PannerStrategyToInt on PannerStrategy {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case PannerStrategy.delegate:
        return 0;
      case PannerStrategy.hrtf:
        return 1;
      case PannerStrategy.stereo:
        return 2;
      case PannerStrategy.count:
        return 3;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToPannerStrategy on int {
  /// Return a Dart value.
  PannerStrategy toPannerStrategy() {
    switch (this) {
      case 0:
        return PannerStrategy.delegate;
      case 1:
        return PannerStrategy.hrtf;
      case 2:
        return PannerStrategy.stereo;
      case 3:
        return PannerStrategy.count;
      default:
        throw SynthizerError('Unrecognised PannerStrategy value.', this);
    }
  }
}

/// SYZ_DISTANCE_MODEL.
enum DistanceModel {
  /// SYZ_DISTANCE_MODEL = 0
  none,

  /// SYZ_DISTANCE_MODEL = 1
  linear,

  /// SYZ_DISTANCE_MODEL = 2
  exponential,

  /// SYZ_DISTANCE_MODEL = 3
  inverse,

  /// SYZ_DISTANCE_MODEL = 4
  count,
}

/// An extension for converting Dart to Synthizer values.
extension DistanceModelToInt on DistanceModel {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case DistanceModel.none:
        return 0;
      case DistanceModel.linear:
        return 1;
      case DistanceModel.exponential:
        return 2;
      case DistanceModel.inverse:
        return 3;
      case DistanceModel.count:
        return 4;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToDistanceModel on int {
  /// Return a Dart value.
  DistanceModel toDistanceModel() {
    switch (this) {
      case 0:
        return DistanceModel.none;
      case 1:
        return DistanceModel.linear;
      case 2:
        return DistanceModel.exponential;
      case 3:
        return DistanceModel.inverse;
      case 4:
        return DistanceModel.count;
      default:
        throw SynthizerError('Unrecognised DistanceModel value.', this);
    }
  }
}

/// SYZ_NOISE_TYPE.
enum NoiseType {
  /// SYZ_NOISE_TYPE = 0
  uniform,

  /// SYZ_NOISE_TYPE = 1
  vm,

  /// SYZ_NOISE_TYPE = 2
  filteredBrown,

  /// SYZ_NOISE_TYPE = 3
  count,
}

/// An extension for converting Dart to Synthizer values.
extension NoiseTypeToInt on NoiseType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case NoiseType.uniform:
        return 0;
      case NoiseType.vm:
        return 1;
      case NoiseType.filteredBrown:
        return 2;
      case NoiseType.count:
        return 3;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToNoiseType on int {
  /// Return a Dart value.
  NoiseType toNoiseType() {
    switch (this) {
      case 0:
        return NoiseType.uniform;
      case 1:
        return NoiseType.vm;
      case 2:
        return NoiseType.filteredBrown;
      case 3:
        return NoiseType.count;
      default:
        throw SynthizerError('Unrecognised NoiseType value.', this);
    }
  }
}

/// SYZ_PROPERTIES.
enum Properties {
  /// SYZ_PROPERTIES = 0
  azimuth,

  /// SYZ_PROPERTIES = 1
  buffer,

  /// SYZ_PROPERTIES = 2
  elevation,

  /// SYZ_PROPERTIES = 3
  gain,

  /// SYZ_PROPERTIES = 4
  defaultPannerStrategy,

  /// SYZ_PROPERTIES = 5
  panningScalar,

  /// SYZ_PROPERTIES = 6
  playbackPosition,

  /// SYZ_PROPERTIES = 7
  position,

  /// SYZ_PROPERTIES = 8
  orientation,

  /// SYZ_PROPERTIES = 9
  closenessBoost,

  /// SYZ_PROPERTIES = 10
  closenessBoostDistance,

  /// SYZ_PROPERTIES = 11
  distanceMax,

  /// SYZ_PROPERTIES = 12
  distanceModel,

  /// SYZ_PROPERTIES = 13
  distanceRef,

  /// SYZ_PROPERTIES = 14
  rolloff,

  /// SYZ_PROPERTIES = 15
  defaultClosenessBoost,

  /// SYZ_PROPERTIES = 16
  defaultClosenessBoostDistance,

  /// SYZ_PROPERTIES = 17
  defaultDistanceMax,

  /// SYZ_PROPERTIES = 18
  defaultDistanceModel,

  /// SYZ_PROPERTIES = 19
  defaultDistanceRef,

  /// SYZ_PROPERTIES = 20
  defaultRolloff,

  /// SYZ_PROPERTIES = 21
  looping,

  /// SYZ_PROPERTIES = 22
  noiseType,

  /// SYZ_PROPERTIES = 23
  pitchBend,

  /// SYZ_PROPERTIES = 24
  inputFilterEnabled,

  /// SYZ_PROPERTIES = 25
  inputFilterCutoff,

  /// SYZ_PROPERTIES = 26
  meanFreePath,

  /// SYZ_PROPERTIES = 27
  t60,

  /// SYZ_PROPERTIES = 28
  lateReflectionsLfRolloff,

  /// SYZ_PROPERTIES = 29
  lateReflectionsLfReference,

  /// SYZ_PROPERTIES = 30
  lateReflectionsHfRolloff,

  /// SYZ_PROPERTIES = 31
  lateReflectionsHfReference,

  /// SYZ_PROPERTIES = 32
  lateReflectionsDiffusion,

  /// SYZ_PROPERTIES = 33
  lateReflectionsModulationDepth,

  /// SYZ_PROPERTIES = 34
  lateReflectionsModulationFrequency,

  /// SYZ_PROPERTIES = 35
  lateReflectionsDelay,

  /// SYZ_PROPERTIES = 36
  filter,

  /// SYZ_PROPERTIES = 37
  filterDirect,

  /// SYZ_PROPERTIES = 38
  filterEffects,

  /// SYZ_PROPERTIES = 39
  filterInput,
}

/// An extension for converting Dart to Synthizer values.
extension PropertiesToInt on Properties {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case Properties.azimuth:
        return 0;
      case Properties.buffer:
        return 1;
      case Properties.elevation:
        return 2;
      case Properties.gain:
        return 3;
      case Properties.defaultPannerStrategy:
        return 4;
      case Properties.panningScalar:
        return 5;
      case Properties.playbackPosition:
        return 6;
      case Properties.position:
        return 7;
      case Properties.orientation:
        return 8;
      case Properties.closenessBoost:
        return 9;
      case Properties.closenessBoostDistance:
        return 10;
      case Properties.distanceMax:
        return 11;
      case Properties.distanceModel:
        return 12;
      case Properties.distanceRef:
        return 13;
      case Properties.rolloff:
        return 14;
      case Properties.defaultClosenessBoost:
        return 15;
      case Properties.defaultClosenessBoostDistance:
        return 16;
      case Properties.defaultDistanceMax:
        return 17;
      case Properties.defaultDistanceModel:
        return 18;
      case Properties.defaultDistanceRef:
        return 19;
      case Properties.defaultRolloff:
        return 20;
      case Properties.looping:
        return 21;
      case Properties.noiseType:
        return 22;
      case Properties.pitchBend:
        return 23;
      case Properties.inputFilterEnabled:
        return 24;
      case Properties.inputFilterCutoff:
        return 25;
      case Properties.meanFreePath:
        return 26;
      case Properties.t60:
        return 27;
      case Properties.lateReflectionsLfRolloff:
        return 28;
      case Properties.lateReflectionsLfReference:
        return 29;
      case Properties.lateReflectionsHfRolloff:
        return 30;
      case Properties.lateReflectionsHfReference:
        return 31;
      case Properties.lateReflectionsDiffusion:
        return 32;
      case Properties.lateReflectionsModulationDepth:
        return 33;
      case Properties.lateReflectionsModulationFrequency:
        return 34;
      case Properties.lateReflectionsDelay:
        return 35;
      case Properties.filter:
        return 36;
      case Properties.filterDirect:
        return 37;
      case Properties.filterEffects:
        return 38;
      case Properties.filterInput:
        return 39;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToProperties on int {
  /// Return a Dart value.
  Properties toProperties() {
    switch (this) {
      case 0:
        return Properties.azimuth;
      case 1:
        return Properties.buffer;
      case 2:
        return Properties.elevation;
      case 3:
        return Properties.gain;
      case 4:
        return Properties.defaultPannerStrategy;
      case 5:
        return Properties.panningScalar;
      case 6:
        return Properties.playbackPosition;
      case 7:
        return Properties.position;
      case 8:
        return Properties.orientation;
      case 9:
        return Properties.closenessBoost;
      case 10:
        return Properties.closenessBoostDistance;
      case 11:
        return Properties.distanceMax;
      case 12:
        return Properties.distanceModel;
      case 13:
        return Properties.distanceRef;
      case 14:
        return Properties.rolloff;
      case 15:
        return Properties.defaultClosenessBoost;
      case 16:
        return Properties.defaultClosenessBoostDistance;
      case 17:
        return Properties.defaultDistanceMax;
      case 18:
        return Properties.defaultDistanceModel;
      case 19:
        return Properties.defaultDistanceRef;
      case 20:
        return Properties.defaultRolloff;
      case 21:
        return Properties.looping;
      case 22:
        return Properties.noiseType;
      case 23:
        return Properties.pitchBend;
      case 24:
        return Properties.inputFilterEnabled;
      case 25:
        return Properties.inputFilterCutoff;
      case 26:
        return Properties.meanFreePath;
      case 27:
        return Properties.t60;
      case 28:
        return Properties.lateReflectionsLfRolloff;
      case 29:
        return Properties.lateReflectionsLfReference;
      case 30:
        return Properties.lateReflectionsHfRolloff;
      case 31:
        return Properties.lateReflectionsHfReference;
      case 32:
        return Properties.lateReflectionsDiffusion;
      case 33:
        return Properties.lateReflectionsModulationDepth;
      case 34:
        return Properties.lateReflectionsModulationFrequency;
      case 35:
        return Properties.lateReflectionsDelay;
      case 36:
        return Properties.filter;
      case 37:
        return Properties.filterDirect;
      case 38:
        return Properties.filterEffects;
      case 39:
        return Properties.filterInput;
      default:
        throw SynthizerError('Unrecognised Properties value.', this);
    }
  }
}

/// SYZ_EVENT_TYPES.
enum EventTypes {
  /// SYZ_EVENT_TYPES = 0
  invalid,

  /// SYZ_EVENT_TYPES = 1
  looped,

  /// SYZ_EVENT_TYPES = 2
  finished,
}

/// An extension for converting Dart to Synthizer values.
extension EventTypesToInt on EventTypes {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case EventTypes.invalid:
        return 0;
      case EventTypes.looped:
        return 1;
      case EventTypes.finished:
        return 2;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToEventTypes on int {
  /// Return a Dart value.
  EventTypes toEventTypes() {
    switch (this) {
      case 0:
        return EventTypes.invalid;
      case 1:
        return EventTypes.looped;
      case 2:
        return EventTypes.finished;
      default:
        throw SynthizerError('Unrecognised EventTypes value.', this);
    }
  }
}

/// SYZ_INTERPOLATION_TYPES.
enum InterpolationTypes {
  /// SYZ_INTERPOLATION_TYPES = 0
  none,

  /// SYZ_INTERPOLATION_TYPES = 1
  linear,
}

/// An extension for converting Dart to Synthizer values.
extension InterpolationTypesToInt on InterpolationTypes {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case InterpolationTypes.none:
        return 0;
      case InterpolationTypes.linear:
        return 1;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToInterpolationTypes on int {
  /// Return a Dart value.
  InterpolationTypes toInterpolationTypes() {
    switch (this) {
      case 0:
        return InterpolationTypes.none;
      case 1:
        return InterpolationTypes.linear;
      default:
        throw SynthizerError('Unrecognised InterpolationTypes value.', this);
    }
  }
}
